7. Arrays
    Arrays are a list of values.
    javascript
    Copy code
    let arr = [1, 2, 3];

    Common Array Methods
    push(): Adds an element to the end.
    pop(): Removes the last element.
    shift(): Removes the first element.
    unshift(): Adds an element to the beginning.
    splice(): Adds/removes elements at a specific index.
    slice(): Returns a shallow copy of a portion of an array.
    map(): Creates a new array by applying a function to each element.
    filter(): Filters elements based on a condition.
    reduce(): Reduces the array to a single value.

8. Strings
    Strings are immutable and offer many methods for manipulation.

    Common String Methods
    toUpperCase(), toLowerCase()
    indexOf(), lastIndexOf()
    substring(), slice()
    replace()
    split()
    trim()
    javascript
    Copy code
    let str = " Hello World ";
    console.log(str.trim()); // "Hello World"

9. Type Coercion
    JavaScript automatically converts types in certain operations.

    Implicit Coercion
    javascript
    Copy code
    console.log("5" + 5); // "55"
    console.log("5" - 1); // 4

    Explicit Coercion
    javascript
    Copy code
    let num = Number("42");
    let str = String(42);

10. Error Handling
     Use try...catch to handle errors.
     javascript
     Copy code
     try {
        let result = someUndefinedVariable;
     } catch (error) {
        console.log("Error occurred:", error.message);
     }

11. Scope
     Global Scope: Variables accessible anywhere.
     Function Scope: Variables defined within a function are local to that function.
     Block Scope: Variables declared with let and const are scoped to the block.

12. Hoisting
     JavaScript moves function declarations and var declarations to the top during the compile phase. let and const declarations are hoisted but are not initialized.

13. Closures
     A closure is a function that retains access to its lexical scope, even when the function is executed outside that scope.
     javascript
     Copy code
     function outer() {
        let counter = 0;
        return function inner() {
          counter++;
          return counter;
        };
     }
     const increment = outer();
     console.log(increment()); // 1
     console.log(increment()); // 2

This covers the essentials of JavaScript fundamentals. 
